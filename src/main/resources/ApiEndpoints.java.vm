package ${packageName};

public final class ApiEndpoints {

    private static java.util.List<ApiEndpoints> APIS = new java.util.ArrayList<>();

    public final String controller;
    public final String endpoint;
    public final String url;
    public final String method;

    ApiEndpoints(String controller, String endpoint, String url, String method) {
        this.controller = controller;
        this.endpoint = endpoint;
        this.url = url;
        this.method = method;
    }
    public String name() {
        return controller;
    }

    public static java.util.List<ApiEndpoints> values() {
        return APIS;
    }
    public static ApiEndpoints find(String url, String method) {
        String clearedUrl = url;
        for(int i = clearedUrl.length() - 1 ; i > -1 ; i --){
            char c = clearedUrl.charAt(i);
            if(c != '/'){
                clearedUrl = url.substring(0, i + 1);
                break;
            }
        }

        org.springframework.util.AntPathMatcher matcher = new org.springframework.util.AntPathMatcher();
        for(ApiEndpoints t : APIS){
            if(
                    (matcher.match(t.url, url) || matcher.match(t.url, clearedUrl))

                    &&
                t.method.matches(method)
            ){
                return t;
            }
        }
        return null;
    }
    public static ApiEndpoints find(javax.servlet.http.HttpServletRequest request) {
        String uri = request.getRequestURI();
        String contextPath = request.getContextPath();

        uri = uri.replace(contextPath, "");

        return find(uri, request.getMethod().toUpperCase());
    }
    public static ApiEndpoints addApi(String name, String url, String method) {
        ApiEndpoints ret = new ApiEndpoints(name, "", url, method);
        APIS.add(ret);
        return ret;
    }
    public static void removeApi(String name){
        var list = new java.util.ArrayList<ApiEndpoints>();
        for(var api : APIS) {
            if(name.equals(api.name())){
                list.add(api);
            }
        }
        for(var api : list){
            APIS.remove(api);
        }
    }

    static {
        /*
        #foreach($vl in $values)
            APIS.add(new ApiEndpoints("$vl.name", "", "$vl.args[2]", "$vl.args[3]"));
        #end
        */
        ${RESULTS}
    }
}